/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as LayoutQueryImport } from './routes/_layout/query'
import { Route as LayoutExtrinsicImport } from './routes/_layout/extrinsic'
import { Route as LayoutExplorerImport } from './routes/_layout/explorer'
import { Route as LayoutAccountsImport } from './routes/_layout/accounts'
import { Route as LayoutUtilitiesIndexImport } from './routes/_layout/utilities/index'
import { Route as LayoutUtilitiesLayoutImport } from './routes/_layout/utilities/_layout'
import { Route as LayoutUtilitiesLayoutPlanckConvertorImport } from './routes/_layout/utilities/_layout/planck-convertor'

// Create Virtual Routes

const LayoutUtilitiesImport = createFileRoute('/_layout/utilities')()

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LayoutUtilitiesRoute = LayoutUtilitiesImport.update({
  path: '/utilities',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutQueryRoute = LayoutQueryImport.update({
  path: '/query',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutExtrinsicRoute = LayoutExtrinsicImport.update({
  path: '/extrinsic',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutExplorerRoute = LayoutExplorerImport.update({
  path: '/explorer',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAccountsRoute = LayoutAccountsImport.update({
  path: '/accounts',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutUtilitiesIndexRoute = LayoutUtilitiesIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutUtilitiesRoute,
} as any)

const LayoutUtilitiesLayoutRoute = LayoutUtilitiesLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => LayoutUtilitiesRoute,
} as any)

const LayoutUtilitiesLayoutPlanckConvertorRoute =
  LayoutUtilitiesLayoutPlanckConvertorImport.update({
    path: '/planck-convertor',
    getParentRoute: () => LayoutUtilitiesLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/accounts': {
      id: '/_layout/accounts'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof LayoutAccountsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/explorer': {
      id: '/_layout/explorer'
      path: '/explorer'
      fullPath: '/explorer'
      preLoaderRoute: typeof LayoutExplorerImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/extrinsic': {
      id: '/_layout/extrinsic'
      path: '/extrinsic'
      fullPath: '/extrinsic'
      preLoaderRoute: typeof LayoutExtrinsicImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/query': {
      id: '/_layout/query'
      path: '/query'
      fullPath: '/query'
      preLoaderRoute: typeof LayoutQueryImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/utilities': {
      id: '/_layout/utilities'
      path: '/utilities'
      fullPath: '/utilities'
      preLoaderRoute: typeof LayoutUtilitiesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/utilities/_layout': {
      id: '/_layout/utilities/_layout'
      path: '/utilities'
      fullPath: '/utilities'
      preLoaderRoute: typeof LayoutUtilitiesLayoutImport
      parentRoute: typeof LayoutUtilitiesRoute
    }
    '/_layout/utilities/': {
      id: '/_layout/utilities/'
      path: '/'
      fullPath: '/utilities/'
      preLoaderRoute: typeof LayoutUtilitiesIndexImport
      parentRoute: typeof LayoutUtilitiesImport
    }
    '/_layout/utilities/_layout/planck-convertor': {
      id: '/_layout/utilities/_layout/planck-convertor'
      path: '/planck-convertor'
      fullPath: '/utilities/planck-convertor'
      preLoaderRoute: typeof LayoutUtilitiesLayoutPlanckConvertorImport
      parentRoute: typeof LayoutUtilitiesLayoutImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  LayoutRoute: LayoutRoute.addChildren({
    LayoutAccountsRoute,
    LayoutExplorerRoute,
    LayoutExtrinsicRoute,
    LayoutQueryRoute,
    LayoutUtilitiesRoute: LayoutUtilitiesRoute.addChildren({
      LayoutUtilitiesLayoutRoute: LayoutUtilitiesLayoutRoute.addChildren({
        LayoutUtilitiesLayoutPlanckConvertorRoute,
      }),
      LayoutUtilitiesIndexRoute,
    }),
  }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/accounts",
        "/_layout/explorer",
        "/_layout/extrinsic",
        "/_layout/query",
        "/_layout/utilities"
      ]
    },
    "/_layout/accounts": {
      "filePath": "_layout/accounts.tsx",
      "parent": "/_layout"
    },
    "/_layout/explorer": {
      "filePath": "_layout/explorer.tsx",
      "parent": "/_layout"
    },
    "/_layout/extrinsic": {
      "filePath": "_layout/extrinsic.tsx",
      "parent": "/_layout"
    },
    "/_layout/query": {
      "filePath": "_layout/query.tsx",
      "parent": "/_layout"
    },
    "/_layout/utilities": {
      "filePath": "_layout/utilities",
      "parent": "/_layout",
      "children": [
        "/_layout/utilities/_layout",
        "/_layout/utilities/"
      ]
    },
    "/_layout/utilities/_layout": {
      "filePath": "_layout/utilities/_layout.tsx",
      "parent": "/_layout/utilities",
      "children": [
        "/_layout/utilities/_layout/planck-convertor"
      ]
    },
    "/_layout/utilities/": {
      "filePath": "_layout/utilities/index.tsx",
      "parent": "/_layout/utilities"
    },
    "/_layout/utilities/_layout/planck-convertor": {
      "filePath": "_layout/utilities/_layout/planck-convertor.tsx",
      "parent": "/_layout/utilities/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
