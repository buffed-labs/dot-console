/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LayoutQueriesRouteImport } from './routes/_layout/queries'
import { Route as LayoutExtrinsicsRouteImport } from './routes/_layout/extrinsics'
import { Route as LayoutExplorerRouteImport } from './routes/_layout/explorer'
import { Route as LayoutAssetsRouteImport } from './routes/_layout/assets'
import { Route as LayoutUtilitiesIndexRouteImport } from './routes/_layout/utilities/index'
import { Route as LayoutStakingIndexRouteImport } from './routes/_layout/staking/index'
import { Route as LayoutReferendaIndexRouteImport } from './routes/_layout/referenda/index'
import { Route as LayoutCollectivesIndexRouteImport } from './routes/_layout/collectives/index'
import { Route as LayoutUtilitiesLayoutRouteImport } from './routes/_layout/utilities/_layout'
import { Route as LayoutStakingLayoutRouteImport } from './routes/_layout/staking/_layout'
import { Route as LayoutCollectivesLayoutRouteImport } from './routes/_layout/collectives/_layout'
import { Route as LayoutAccountsLayoutRouteImport } from './routes/_layout/accounts/_layout'
import { Route as LayoutAccountsLayoutIndexRouteImport } from './routes/_layout/accounts/_layout/index'
import { Route as LayoutUtilitiesLayoutPlanckConvertorRouteImport } from './routes/_layout/utilities/_layout/planck-convertor'
import { Route as LayoutStakingLayoutValidatorsRouteImport } from './routes/_layout/staking/_layout/validators'
import { Route as LayoutStakingLayoutNominationPoolsRouteImport } from './routes/_layout/staking/_layout/nomination-pools'
import { Route as LayoutCollectivesLayoutFellowshipRouteImport } from './routes/_layout/collectives/_layout/fellowship'
import { Route as LayoutCollectivesLayoutAmbassadorRouteImport } from './routes/_layout/collectives/_layout/ambassador'
import { Route as LayoutAccountsLayoutValidatorsRouteImport } from './routes/_layout/accounts/_layout/validators'

const LayoutUtilitiesRouteImport = createFileRoute('/_layout/utilities')()
const LayoutStakingRouteImport = createFileRoute('/_layout/staking')()
const LayoutCollectivesRouteImport = createFileRoute('/_layout/collectives')()
const LayoutAccountsRouteImport = createFileRoute('/_layout/accounts')()

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutUtilitiesRoute = LayoutUtilitiesRouteImport.update({
  id: '/utilities',
  path: '/utilities',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutStakingRoute = LayoutStakingRouteImport.update({
  id: '/staking',
  path: '/staking',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutCollectivesRoute = LayoutCollectivesRouteImport.update({
  id: '/collectives',
  path: '/collectives',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutAccountsRoute = LayoutAccountsRouteImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutQueriesRoute = LayoutQueriesRouteImport.update({
  id: '/queries',
  path: '/queries',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutExtrinsicsRoute = LayoutExtrinsicsRouteImport.update({
  id: '/extrinsics',
  path: '/extrinsics',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutExplorerRoute = LayoutExplorerRouteImport.update({
  id: '/explorer',
  path: '/explorer',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutAssetsRoute = LayoutAssetsRouteImport.update({
  id: '/assets',
  path: '/assets',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutUtilitiesIndexRoute = LayoutUtilitiesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutUtilitiesRoute,
} as any)
const LayoutStakingIndexRoute = LayoutStakingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutStakingRoute,
} as any)
const LayoutReferendaIndexRoute = LayoutReferendaIndexRouteImport.update({
  id: '/referenda/',
  path: '/referenda/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutCollectivesIndexRoute = LayoutCollectivesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutCollectivesRoute,
} as any)
const LayoutUtilitiesLayoutRoute = LayoutUtilitiesLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => LayoutUtilitiesRoute,
} as any)
const LayoutStakingLayoutRoute = LayoutStakingLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => LayoutStakingRoute,
} as any)
const LayoutCollectivesLayoutRoute = LayoutCollectivesLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => LayoutCollectivesRoute,
} as any)
const LayoutAccountsLayoutRoute = LayoutAccountsLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => LayoutAccountsRoute,
} as any)
const LayoutAccountsLayoutIndexRoute =
  LayoutAccountsLayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => LayoutAccountsLayoutRoute,
  } as any)
const LayoutUtilitiesLayoutPlanckConvertorRoute =
  LayoutUtilitiesLayoutPlanckConvertorRouteImport.update({
    id: '/planck-convertor',
    path: '/planck-convertor',
    getParentRoute: () => LayoutUtilitiesLayoutRoute,
  } as any)
const LayoutStakingLayoutValidatorsRoute =
  LayoutStakingLayoutValidatorsRouteImport.update({
    id: '/validators',
    path: '/validators',
    getParentRoute: () => LayoutStakingLayoutRoute,
  } as any)
const LayoutStakingLayoutNominationPoolsRoute =
  LayoutStakingLayoutNominationPoolsRouteImport.update({
    id: '/nomination-pools',
    path: '/nomination-pools',
    getParentRoute: () => LayoutStakingLayoutRoute,
  } as any)
const LayoutCollectivesLayoutFellowshipRoute =
  LayoutCollectivesLayoutFellowshipRouteImport.update({
    id: '/fellowship',
    path: '/fellowship',
    getParentRoute: () => LayoutCollectivesLayoutRoute,
  } as any)
const LayoutCollectivesLayoutAmbassadorRoute =
  LayoutCollectivesLayoutAmbassadorRouteImport.update({
    id: '/ambassador',
    path: '/ambassador',
    getParentRoute: () => LayoutCollectivesLayoutRoute,
  } as any)
const LayoutAccountsLayoutValidatorsRoute =
  LayoutAccountsLayoutValidatorsRouteImport.update({
    id: '/validators',
    path: '/validators',
    getParentRoute: () => LayoutAccountsLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/assets': typeof LayoutAssetsRoute
  '/explorer': typeof LayoutExplorerRoute
  '/extrinsics': typeof LayoutExtrinsicsRoute
  '/queries': typeof LayoutQueriesRoute
  '/accounts': typeof LayoutAccountsLayoutRouteWithChildren
  '/collectives': typeof LayoutCollectivesLayoutRouteWithChildren
  '/staking': typeof LayoutStakingLayoutRouteWithChildren
  '/utilities': typeof LayoutUtilitiesLayoutRouteWithChildren
  '/collectives/': typeof LayoutCollectivesIndexRoute
  '/referenda': typeof LayoutReferendaIndexRoute
  '/staking/': typeof LayoutStakingIndexRoute
  '/utilities/': typeof LayoutUtilitiesIndexRoute
  '/accounts/validators': typeof LayoutAccountsLayoutValidatorsRoute
  '/collectives/ambassador': typeof LayoutCollectivesLayoutAmbassadorRoute
  '/collectives/fellowship': typeof LayoutCollectivesLayoutFellowshipRoute
  '/staking/nomination-pools': typeof LayoutStakingLayoutNominationPoolsRoute
  '/staking/validators': typeof LayoutStakingLayoutValidatorsRoute
  '/utilities/planck-convertor': typeof LayoutUtilitiesLayoutPlanckConvertorRoute
  '/accounts/': typeof LayoutAccountsLayoutIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/assets': typeof LayoutAssetsRoute
  '/explorer': typeof LayoutExplorerRoute
  '/extrinsics': typeof LayoutExtrinsicsRoute
  '/queries': typeof LayoutQueriesRoute
  '/accounts': typeof LayoutAccountsLayoutIndexRoute
  '/collectives': typeof LayoutCollectivesIndexRoute
  '/staking': typeof LayoutStakingIndexRoute
  '/utilities': typeof LayoutUtilitiesIndexRoute
  '/referenda': typeof LayoutReferendaIndexRoute
  '/accounts/validators': typeof LayoutAccountsLayoutValidatorsRoute
  '/collectives/ambassador': typeof LayoutCollectivesLayoutAmbassadorRoute
  '/collectives/fellowship': typeof LayoutCollectivesLayoutFellowshipRoute
  '/staking/nomination-pools': typeof LayoutStakingLayoutNominationPoolsRoute
  '/staking/validators': typeof LayoutStakingLayoutValidatorsRoute
  '/utilities/planck-convertor': typeof LayoutUtilitiesLayoutPlanckConvertorRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/assets': typeof LayoutAssetsRoute
  '/_layout/explorer': typeof LayoutExplorerRoute
  '/_layout/extrinsics': typeof LayoutExtrinsicsRoute
  '/_layout/queries': typeof LayoutQueriesRoute
  '/_layout/accounts': typeof LayoutAccountsRouteWithChildren
  '/_layout/accounts/_layout': typeof LayoutAccountsLayoutRouteWithChildren
  '/_layout/collectives': typeof LayoutCollectivesRouteWithChildren
  '/_layout/collectives/_layout': typeof LayoutCollectivesLayoutRouteWithChildren
  '/_layout/staking': typeof LayoutStakingRouteWithChildren
  '/_layout/staking/_layout': typeof LayoutStakingLayoutRouteWithChildren
  '/_layout/utilities': typeof LayoutUtilitiesRouteWithChildren
  '/_layout/utilities/_layout': typeof LayoutUtilitiesLayoutRouteWithChildren
  '/_layout/collectives/': typeof LayoutCollectivesIndexRoute
  '/_layout/referenda/': typeof LayoutReferendaIndexRoute
  '/_layout/staking/': typeof LayoutStakingIndexRoute
  '/_layout/utilities/': typeof LayoutUtilitiesIndexRoute
  '/_layout/accounts/_layout/validators': typeof LayoutAccountsLayoutValidatorsRoute
  '/_layout/collectives/_layout/ambassador': typeof LayoutCollectivesLayoutAmbassadorRoute
  '/_layout/collectives/_layout/fellowship': typeof LayoutCollectivesLayoutFellowshipRoute
  '/_layout/staking/_layout/nomination-pools': typeof LayoutStakingLayoutNominationPoolsRoute
  '/_layout/staking/_layout/validators': typeof LayoutStakingLayoutValidatorsRoute
  '/_layout/utilities/_layout/planck-convertor': typeof LayoutUtilitiesLayoutPlanckConvertorRoute
  '/_layout/accounts/_layout/': typeof LayoutAccountsLayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/assets'
    | '/explorer'
    | '/extrinsics'
    | '/queries'
    | '/accounts'
    | '/collectives'
    | '/staking'
    | '/utilities'
    | '/collectives/'
    | '/referenda'
    | '/staking/'
    | '/utilities/'
    | '/accounts/validators'
    | '/collectives/ambassador'
    | '/collectives/fellowship'
    | '/staking/nomination-pools'
    | '/staking/validators'
    | '/utilities/planck-convertor'
    | '/accounts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/assets'
    | '/explorer'
    | '/extrinsics'
    | '/queries'
    | '/accounts'
    | '/collectives'
    | '/staking'
    | '/utilities'
    | '/referenda'
    | '/accounts/validators'
    | '/collectives/ambassador'
    | '/collectives/fellowship'
    | '/staking/nomination-pools'
    | '/staking/validators'
    | '/utilities/planck-convertor'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/_layout/assets'
    | '/_layout/explorer'
    | '/_layout/extrinsics'
    | '/_layout/queries'
    | '/_layout/accounts'
    | '/_layout/accounts/_layout'
    | '/_layout/collectives'
    | '/_layout/collectives/_layout'
    | '/_layout/staking'
    | '/_layout/staking/_layout'
    | '/_layout/utilities'
    | '/_layout/utilities/_layout'
    | '/_layout/collectives/'
    | '/_layout/referenda/'
    | '/_layout/staking/'
    | '/_layout/utilities/'
    | '/_layout/accounts/_layout/validators'
    | '/_layout/collectives/_layout/ambassador'
    | '/_layout/collectives/_layout/fellowship'
    | '/_layout/staking/_layout/nomination-pools'
    | '/_layout/staking/_layout/validators'
    | '/_layout/utilities/_layout/planck-convertor'
    | '/_layout/accounts/_layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/utilities': {
      id: '/_layout/utilities'
      path: '/utilities'
      fullPath: '/utilities'
      preLoaderRoute: typeof LayoutUtilitiesRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/staking': {
      id: '/_layout/staking'
      path: '/staking'
      fullPath: '/staking'
      preLoaderRoute: typeof LayoutStakingRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/collectives': {
      id: '/_layout/collectives'
      path: '/collectives'
      fullPath: '/collectives'
      preLoaderRoute: typeof LayoutCollectivesRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/accounts': {
      id: '/_layout/accounts'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof LayoutAccountsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/queries': {
      id: '/_layout/queries'
      path: '/queries'
      fullPath: '/queries'
      preLoaderRoute: typeof LayoutQueriesRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/extrinsics': {
      id: '/_layout/extrinsics'
      path: '/extrinsics'
      fullPath: '/extrinsics'
      preLoaderRoute: typeof LayoutExtrinsicsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/explorer': {
      id: '/_layout/explorer'
      path: '/explorer'
      fullPath: '/explorer'
      preLoaderRoute: typeof LayoutExplorerRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/assets': {
      id: '/_layout/assets'
      path: '/assets'
      fullPath: '/assets'
      preLoaderRoute: typeof LayoutAssetsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/utilities/': {
      id: '/_layout/utilities/'
      path: '/'
      fullPath: '/utilities/'
      preLoaderRoute: typeof LayoutUtilitiesIndexRouteImport
      parentRoute: typeof LayoutUtilitiesRoute
    }
    '/_layout/staking/': {
      id: '/_layout/staking/'
      path: '/'
      fullPath: '/staking/'
      preLoaderRoute: typeof LayoutStakingIndexRouteImport
      parentRoute: typeof LayoutStakingRoute
    }
    '/_layout/referenda/': {
      id: '/_layout/referenda/'
      path: '/referenda'
      fullPath: '/referenda'
      preLoaderRoute: typeof LayoutReferendaIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/collectives/': {
      id: '/_layout/collectives/'
      path: '/'
      fullPath: '/collectives/'
      preLoaderRoute: typeof LayoutCollectivesIndexRouteImport
      parentRoute: typeof LayoutCollectivesRoute
    }
    '/_layout/utilities/_layout': {
      id: '/_layout/utilities/_layout'
      path: '/utilities'
      fullPath: '/utilities'
      preLoaderRoute: typeof LayoutUtilitiesLayoutRouteImport
      parentRoute: typeof LayoutUtilitiesRoute
    }
    '/_layout/staking/_layout': {
      id: '/_layout/staking/_layout'
      path: '/staking'
      fullPath: '/staking'
      preLoaderRoute: typeof LayoutStakingLayoutRouteImport
      parentRoute: typeof LayoutStakingRoute
    }
    '/_layout/collectives/_layout': {
      id: '/_layout/collectives/_layout'
      path: '/collectives'
      fullPath: '/collectives'
      preLoaderRoute: typeof LayoutCollectivesLayoutRouteImport
      parentRoute: typeof LayoutCollectivesRoute
    }
    '/_layout/accounts/_layout': {
      id: '/_layout/accounts/_layout'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof LayoutAccountsLayoutRouteImport
      parentRoute: typeof LayoutAccountsRoute
    }
    '/_layout/accounts/_layout/': {
      id: '/_layout/accounts/_layout/'
      path: '/'
      fullPath: '/accounts/'
      preLoaderRoute: typeof LayoutAccountsLayoutIndexRouteImport
      parentRoute: typeof LayoutAccountsLayoutRoute
    }
    '/_layout/utilities/_layout/planck-convertor': {
      id: '/_layout/utilities/_layout/planck-convertor'
      path: '/planck-convertor'
      fullPath: '/utilities/planck-convertor'
      preLoaderRoute: typeof LayoutUtilitiesLayoutPlanckConvertorRouteImport
      parentRoute: typeof LayoutUtilitiesLayoutRoute
    }
    '/_layout/staking/_layout/validators': {
      id: '/_layout/staking/_layout/validators'
      path: '/validators'
      fullPath: '/staking/validators'
      preLoaderRoute: typeof LayoutStakingLayoutValidatorsRouteImport
      parentRoute: typeof LayoutStakingLayoutRoute
    }
    '/_layout/staking/_layout/nomination-pools': {
      id: '/_layout/staking/_layout/nomination-pools'
      path: '/nomination-pools'
      fullPath: '/staking/nomination-pools'
      preLoaderRoute: typeof LayoutStakingLayoutNominationPoolsRouteImport
      parentRoute: typeof LayoutStakingLayoutRoute
    }
    '/_layout/collectives/_layout/fellowship': {
      id: '/_layout/collectives/_layout/fellowship'
      path: '/fellowship'
      fullPath: '/collectives/fellowship'
      preLoaderRoute: typeof LayoutCollectivesLayoutFellowshipRouteImport
      parentRoute: typeof LayoutCollectivesLayoutRoute
    }
    '/_layout/collectives/_layout/ambassador': {
      id: '/_layout/collectives/_layout/ambassador'
      path: '/ambassador'
      fullPath: '/collectives/ambassador'
      preLoaderRoute: typeof LayoutCollectivesLayoutAmbassadorRouteImport
      parentRoute: typeof LayoutCollectivesLayoutRoute
    }
    '/_layout/accounts/_layout/validators': {
      id: '/_layout/accounts/_layout/validators'
      path: '/validators'
      fullPath: '/accounts/validators'
      preLoaderRoute: typeof LayoutAccountsLayoutValidatorsRouteImport
      parentRoute: typeof LayoutAccountsLayoutRoute
    }
  }
}

interface LayoutAccountsLayoutRouteChildren {
  LayoutAccountsLayoutValidatorsRoute: typeof LayoutAccountsLayoutValidatorsRoute
  LayoutAccountsLayoutIndexRoute: typeof LayoutAccountsLayoutIndexRoute
}

const LayoutAccountsLayoutRouteChildren: LayoutAccountsLayoutRouteChildren = {
  LayoutAccountsLayoutValidatorsRoute: LayoutAccountsLayoutValidatorsRoute,
  LayoutAccountsLayoutIndexRoute: LayoutAccountsLayoutIndexRoute,
}

const LayoutAccountsLayoutRouteWithChildren =
  LayoutAccountsLayoutRoute._addFileChildren(LayoutAccountsLayoutRouteChildren)

interface LayoutAccountsRouteChildren {
  LayoutAccountsLayoutRoute: typeof LayoutAccountsLayoutRouteWithChildren
}

const LayoutAccountsRouteChildren: LayoutAccountsRouteChildren = {
  LayoutAccountsLayoutRoute: LayoutAccountsLayoutRouteWithChildren,
}

const LayoutAccountsRouteWithChildren = LayoutAccountsRoute._addFileChildren(
  LayoutAccountsRouteChildren,
)

interface LayoutCollectivesLayoutRouteChildren {
  LayoutCollectivesLayoutAmbassadorRoute: typeof LayoutCollectivesLayoutAmbassadorRoute
  LayoutCollectivesLayoutFellowshipRoute: typeof LayoutCollectivesLayoutFellowshipRoute
}

const LayoutCollectivesLayoutRouteChildren: LayoutCollectivesLayoutRouteChildren =
  {
    LayoutCollectivesLayoutAmbassadorRoute:
      LayoutCollectivesLayoutAmbassadorRoute,
    LayoutCollectivesLayoutFellowshipRoute:
      LayoutCollectivesLayoutFellowshipRoute,
  }

const LayoutCollectivesLayoutRouteWithChildren =
  LayoutCollectivesLayoutRoute._addFileChildren(
    LayoutCollectivesLayoutRouteChildren,
  )

interface LayoutCollectivesRouteChildren {
  LayoutCollectivesLayoutRoute: typeof LayoutCollectivesLayoutRouteWithChildren
  LayoutCollectivesIndexRoute: typeof LayoutCollectivesIndexRoute
}

const LayoutCollectivesRouteChildren: LayoutCollectivesRouteChildren = {
  LayoutCollectivesLayoutRoute: LayoutCollectivesLayoutRouteWithChildren,
  LayoutCollectivesIndexRoute: LayoutCollectivesIndexRoute,
}

const LayoutCollectivesRouteWithChildren =
  LayoutCollectivesRoute._addFileChildren(LayoutCollectivesRouteChildren)

interface LayoutStakingLayoutRouteChildren {
  LayoutStakingLayoutNominationPoolsRoute: typeof LayoutStakingLayoutNominationPoolsRoute
  LayoutStakingLayoutValidatorsRoute: typeof LayoutStakingLayoutValidatorsRoute
}

const LayoutStakingLayoutRouteChildren: LayoutStakingLayoutRouteChildren = {
  LayoutStakingLayoutNominationPoolsRoute:
    LayoutStakingLayoutNominationPoolsRoute,
  LayoutStakingLayoutValidatorsRoute: LayoutStakingLayoutValidatorsRoute,
}

const LayoutStakingLayoutRouteWithChildren =
  LayoutStakingLayoutRoute._addFileChildren(LayoutStakingLayoutRouteChildren)

interface LayoutStakingRouteChildren {
  LayoutStakingLayoutRoute: typeof LayoutStakingLayoutRouteWithChildren
  LayoutStakingIndexRoute: typeof LayoutStakingIndexRoute
}

const LayoutStakingRouteChildren: LayoutStakingRouteChildren = {
  LayoutStakingLayoutRoute: LayoutStakingLayoutRouteWithChildren,
  LayoutStakingIndexRoute: LayoutStakingIndexRoute,
}

const LayoutStakingRouteWithChildren = LayoutStakingRoute._addFileChildren(
  LayoutStakingRouteChildren,
)

interface LayoutUtilitiesLayoutRouteChildren {
  LayoutUtilitiesLayoutPlanckConvertorRoute: typeof LayoutUtilitiesLayoutPlanckConvertorRoute
}

const LayoutUtilitiesLayoutRouteChildren: LayoutUtilitiesLayoutRouteChildren = {
  LayoutUtilitiesLayoutPlanckConvertorRoute:
    LayoutUtilitiesLayoutPlanckConvertorRoute,
}

const LayoutUtilitiesLayoutRouteWithChildren =
  LayoutUtilitiesLayoutRoute._addFileChildren(
    LayoutUtilitiesLayoutRouteChildren,
  )

interface LayoutUtilitiesRouteChildren {
  LayoutUtilitiesLayoutRoute: typeof LayoutUtilitiesLayoutRouteWithChildren
  LayoutUtilitiesIndexRoute: typeof LayoutUtilitiesIndexRoute
}

const LayoutUtilitiesRouteChildren: LayoutUtilitiesRouteChildren = {
  LayoutUtilitiesLayoutRoute: LayoutUtilitiesLayoutRouteWithChildren,
  LayoutUtilitiesIndexRoute: LayoutUtilitiesIndexRoute,
}

const LayoutUtilitiesRouteWithChildren = LayoutUtilitiesRoute._addFileChildren(
  LayoutUtilitiesRouteChildren,
)

interface LayoutRouteChildren {
  LayoutAssetsRoute: typeof LayoutAssetsRoute
  LayoutExplorerRoute: typeof LayoutExplorerRoute
  LayoutExtrinsicsRoute: typeof LayoutExtrinsicsRoute
  LayoutQueriesRoute: typeof LayoutQueriesRoute
  LayoutAccountsRoute: typeof LayoutAccountsRouteWithChildren
  LayoutCollectivesRoute: typeof LayoutCollectivesRouteWithChildren
  LayoutStakingRoute: typeof LayoutStakingRouteWithChildren
  LayoutUtilitiesRoute: typeof LayoutUtilitiesRouteWithChildren
  LayoutReferendaIndexRoute: typeof LayoutReferendaIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAssetsRoute: LayoutAssetsRoute,
  LayoutExplorerRoute: LayoutExplorerRoute,
  LayoutExtrinsicsRoute: LayoutExtrinsicsRoute,
  LayoutQueriesRoute: LayoutQueriesRoute,
  LayoutAccountsRoute: LayoutAccountsRouteWithChildren,
  LayoutCollectivesRoute: LayoutCollectivesRouteWithChildren,
  LayoutStakingRoute: LayoutStakingRouteWithChildren,
  LayoutUtilitiesRoute: LayoutUtilitiesRouteWithChildren,
  LayoutReferendaIndexRoute: LayoutReferendaIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
